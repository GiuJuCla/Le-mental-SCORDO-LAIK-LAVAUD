#include <FastLED.h>
#include "lcdgfx.h"  // Bibliothèque pour l'écran OLED

#define DATA_PIN 3
#define NUM_LEDS 256
#define BRIGHTNESS 100

CRGB leds[NUM_LEDS];

#define COLOR_UNITE CRGB::Red
#define COLOR_DIZAINE CRGB::Blue
#define COLOR_CENTAINE CRGB::Green
#define COLOR_ERREUR CRGB::Red

int reponseEntree = -1;
int essais = 0;
int totalEtoiles = 0;

struct Calcul {
  const char* operation;
  int resultat;
};

Calcul calculs[] = {
  {"1 + 2", 3}, {"4 + 3", 7}, {"5 + 5", 10}, {"6 + 2", 8}, {"9 + 1", 10},
  {"7 + 2", 9}, {"8 + 3", 11}, {"10 + 5", 15}, {"3 + 6", 9}, {"2 + 2", 4},
  {"1 + 9", 10}, {"0 + 7", 7}, {"5 + 4", 9}, {"2 + 8", 10}, {"6 + 6", 12}
};

const int nbCalculs = sizeof(calculs) / sizeof(calculs[0]);
int calculActuel = 0;
bool afficherNouveauCalcul = true;
bool enAttenteDeReponse = false;

DisplaySSD1306_128x64_I2C display(-1);

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  FastLED.setBrightness(BRIGHTNESS);
  clearLEDs();

  display.begin();
  display.fill(0x00);
  display.setFixedFont(ssd1306xled_font6x8);
  display.printFixed(0, 0, "📚 C'est parti !", STYLE_BOLD);
  delay(2000);
  display.clear();
}

void loop() {
  if (calculActuel < nbCalculs) {
    if (afficherNouveauCalcul) {
      afficherOperation(calculs[calculActuel].operation);
      essais = 0;
      reponseEntree = -1;
      afficherNouveauCalcul = false;
      enAttenteDeReponse = true;
    }

    if (enAttenteDeReponse) {
      int entree = lireClavier();

      if (entree >= 0 && entree <= 9) {
        reponseEntree = (reponseEntree == -1) ? entree : (reponseEntree * 10 + entree);
        afficherReponseOLED(reponseEntree);
      }

      else if (entree == 99) { // Valider
        if (reponseEntree == calculs[calculActuel].resultat) {
          afficherMessageOLED("Bravo ! +1 etoile");
          totalEtoiles++;
          afficherResultat(reponseEntree);
          delay(5000);
          calculActuel++;
          afficherNouveauCalcul = true;
          enAttenteDeReponse = false;
          clearLEDs();
        } else {
          essais++;
          if (essais >= 3) {
            afficherMessageOLED("Tu n'as pas reussi. 0 etoile");
            delay(5000);
            calculActuel++;
            afficherNouveauCalcul = true;
            enAttenteDeReponse = false;
            clearLEDs();
          } else {
            afficherMessageOLED("Mauvaise reponse");
            clignoterErreur();
            reponseEntree = -1;
            afficherReponseOLED(reponseEntree);
          }
        }
      }

      else if (entree == 88) { // Corriger
        reponseEntree = -1;
        afficherMessageOLED("↩️ Corrige !");
        delay(1000);
        afficherOperation(calculs[calculActuel].operation);
      }
    }
  } else {
    display.clear();
    String resultat = "Tu as eu " + String(totalEtoiles) + " etoiles / " + String(nbCalculs);
    display.printFixed(0, 0, resultat.c_str(), STYLE_BOLD);
    Serial.println(resultat);
    while (true); // Fin
  }
}

int lireClavier() {
  if (Serial.available() > 0) {
    char c = Serial.read();
    if (c >= '0' && c <= '9') return c - '0';
    else if (c == 'v' || c == 'V') return 99;
    else if (c == 'c' || c == 'C') return 88;
  }
  return -1;
}

void afficherOperation(String op) {
  display.clear();
  display.printFixed(0, 0, "Quel est le resultat?", STYLE_BOLD);
  display.printFixed(0, 16, op.c_str(), STYLE_NORMAL);
}

void afficherReponseOLED(int valeur) {
  display.printFixed(0, 32, "                    ", STYLE_NORMAL);
  if (valeur != -1) {
    String txt = "Reponse: " + String(valeur);
    display.printFixed(0, 32, txt.c_str(), STYLE_BOLD);
  }
}

void afficherMessageOLED(const char* msg) {
  display.printFixed(0, 48, "                    ", STYLE_NORMAL);
  display.printFixed(0, 48, msg, STYLE_BOLD);
}

void clignoterErreur() {
  for (int i = 0; i < 2; i++) {
    fill_solid(leds, NUM_LEDS, COLOR_ERREUR);
    FastLED.show();
    delay(300);
    clearLEDs();
    delay(300);
  }
}

void afficherResultat(int nombre) {
  int centaines = nombre / 100;
  int dizaines = (nombre % 100) / 10;
  int unites = nombre % 10;

  clearLEDs();
  int index = 0;

  if (centaines > 0) {
    for (int y = 0; y < 10; y++) {
      for (int x = 0; x < 10; x++) {
        int pos = y * 16 + x;
        if (pos < NUM_LEDS) leds[pos] = COLOR_CENTAINE;
      }
    }
  }

  index = 100;

  for (int d = 0; d < dizaines; d++) {
    for (int i = 0; i < 10; i++) {
      if (index + i < NUM_LEDS) leds[index + i] = COLOR_DIZAINE;
    }
    index += 16;
  }

  index = 240;
  for (int i = 0; i < unites; i++) {
    if (index + i < NUM_LEDS) leds[index + i] = COLOR_UNITE;
  }

  FastLED.show();
}

void clearLEDs() {
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  FastLED.show();
}

